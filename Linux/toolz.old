#!/bin/bash

# =============================================================================
# Toolz Pro - Multi-Tool Bash Utility
# Author: Sivan Monshi
# =============================================================================

# Color Codes
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

print_banner() {
  hour=$(date +"%H")

  if [ "$hour" -ge 5 ] && [ "$hour" -lt 12 ]; then
    greeting="Good Morning"
  elif [ "$hour" -ge 12 ] && [ "$hour" -lt 17 ]; then
    greeting="Good Afternoon"
  elif [ "$hour" -ge 17 ] && [ "$hour" -lt 21 ]; then
    greeting="Good Evening"
  else
    greeting="Good Night"
  fi

  echo -e "${YELLOW}"
  echo "========================================="
  echo "               ToolZ Pro                 "
  echo "========================================="
  echo -e "${BLUE}${greeting}, welcome to ToolZ Pro by Sivan Monshi!${NC}"
  echo
}

find_helper() {
  echo -e "${BLUE}Enter the directory to search in:${NC}"
  read directory
  if [[ ! -d "$directory" ]]; then
    echo -e "${RED}Invalid directory.${NC}"
    exit 1
  fi

  echo -e "${BLUE}Enter the search pattern (e.g., '*.txt'):${NC}"
  read pattern

  echo -e "${YELLOW}Searching for files...${NC}"
  find "$directory" -name "$pattern"
}

system_info() {
  echo -e "${YELLOW}Memory Usage:${NC}"
  free -h
  echo

  echo -e "${YELLOW}Running Processes:${NC}"
  ps aux | wc -l
  echo

  echo -e "${YELLOW}Disk Usage:${NC}"
  df -h
}

process_management() {
  echo -e "${BLUE}Sort processes by: (1) CPU (2) Memory${NC}"
  read choice

  case $choice in
    1) sort_by="%cpu" ;;
    2) sort_by="%mem" ;;
    *) echo -e "${RED}Invalid choice.${NC}"; exit 1 ;;
  esac

  echo -e "${YELLOW}===== Top Processes =====${NC}"
  printf "%-10s %-8s %-6s %-6s %-30s\n" "USER" "PID" "%CPU" "%MEM" "COMMAND"

  ps -eo user:10,pid,%cpu,%mem,comm --sort=-$sort_by | \
    awk 'NR>1 { printf "%-10s %-8s %-6s %-6s %-30.30s\n", $1, $2, $3, $4, $5 }' | \
    head -n 11

  echo -e "${BLUE}Enter PID to kill (or press Enter to skip):${NC}"
  read pid
  if [[ ! -z "$pid" ]]; then
    kill "$pid"
    echo -e "${GREEN}Process $pid killed.${NC}"
  fi
}

user_management() {
  echo -e "${YELLOW}Currently logged-in users:${NC}"
  who
  echo

  echo -e "${YELLOW}User sessions and activities:${NC}"
  w
  echo

  echo -e "${YELLOW}Recent logins:${NC}"
  last | head
}

network_info() {
  echo -e "${YELLOW}===== Network Information =====${NC}"
  ip addr show
  echo

  echo -e "${YELLOW}===== Active Connections =====${NC}"
  ss -tunap | head -n 20
}

service_list() {
  echo -e "${YELLOW}===== Service Status Table =====${NC}"
  printf "%-45s %-10s %-10s %-10s\n" "SERVICE" "LOAD" "ACTIVE" "SUB"

  systemctl list-units --type=service --no-pager --no-legend | while read -r line; do
    service_name=$(echo "$line" | awk '{print $1}')
    load_status=$(echo "$line" | awk '{print $2}')
    active_status=$(echo "$line" | awk '{print $3}')
    sub_status=$(echo "$line" | awk '{print $4}')

    printf "%-45s %-10s %-10s %-10s\n" "$service_name" "$load_status" "$active_status" "$sub_status"
  done
}

cleanup_temp() {
  echo -e "${YELLOW}Cleaning temporary files...${NC}"
  sudo rm -rf /tmp/*
  echo -e "${GREEN}Temporary files cleaned!${NC}"
}

check_sudo_users() {
  echo -e "${YELLOW}===== Sudo Users =====${NC}"
  getent group sudo
}

disk_health() {
  echo -e "${YELLOW}===== Disk Health =====${NC}"

  if ! command -v smartctl &> /dev/null; then
    echo -e "${RED}The 'smartctl' tool is not installed.${NC}"
    echo -e "${BLUE}Do you want to install 'smartmontools'? (y/n)${NC}"
    read answer

    if [[ "$answer" == "y" || "$answer" == "Y" ]]; then
      sudo apt update
      sudo apt install -y smartmontools
    else
      echo -e "${RED}Cannot check disk health without 'smartctl'. Exiting.${NC}"
      exit 1
    fi
  fi

  sudo smartctl -a /dev/sda
}

analyze_logs() {
  echo -e "${BLUE}Enter log file path (e.g., /var/log/syslog):${NC}"
  read logfile
  if [[ ! -f "$logfile" ]]; then
    echo -e "${RED}Invalid file.${NC}"
    exit 1
  fi

  echo -e "${BLUE}Enter keyword to search for (default: error):${NC}"
  read keyword
  keyword=${keyword:-error}

  echo -e "${YELLOW}===== Searching for '$keyword' in $logfile =====${NC}"
  echo

  grep -i --color=always "$keyword" "$logfile" || echo -e "${YELLOW}No matches found.${NC}"

  echo
  echo -e "${YELLOW}===== End of Search Report =====${NC}"
}

cron_manager() {
  echo -e "${YELLOW}===== Crontab Manager =====${NC}"
  echo "Choose an action:"
  echo "1) List scheduled tasks"
  echo "2) Add a new scheduled task (guided)"
  echo "3) Edit existing scheduled tasks"
  echo "4) Remove all scheduled tasks"
  read -p "Enter choice [1-4]: " choice

  case $choice in
    1)
      crontab -l || echo -e "${YELLOW}No crontab set.${NC}"
      ;;
    2)
      echo -e "${YELLOW}===== Guided Cron Task Creator =====${NC}"
      echo "Choose schedule frequency:"
      echo "1) Every X minutes"
      echo "2) Every X hours"
      echo "3) Every X days"
      echo "4) Specific days of the week"
      echo "5) Specific time daily"
      echo "6) Custom schedule (advanced)"
      read -p "Enter your choice [1-6]: " freq

      case $freq in
        1) read -p "Minutes interval: " minutes; schedule="*/$minutes * * * *" ;;
        2) read -p "Hours interval: " hours; schedule="0 */$hours * * *" ;;
        3) read -p "Days interval: " days; schedule="0 0 */$days * *" ;;
        4)
          echo "Enter days (e.g., 1,3,5 for Mon,Wed,Fri):"
          read days
          read -p "Enter hour (0-23): " hour
          read -p "Enter minute (0-59): " minute
          schedule="$minute $hour * * $days"
          ;;
        5)
          read -p "Hour (0-23): " hour
          read -p "Minute (0-59): " minute
          schedule="$minute $hour * * *"
          ;;
        6)
          echo "Enter full cron expression (e.g., '0 5 * * *'):"
          read schedule
          ;;
        *) echo -e "${RED}Invalid frequency choice.${NC}"; return ;;
      esac

      echo "Enter command to execute:"
      read command

      (crontab -l 2>/dev/null; echo "$schedule $command") | crontab -
      echo -e "${GREEN}New cron job added: $schedule $command${NC}"
      ;;
    3)
      crontab -e
      ;;
    4)
      echo -e "${RED}Are you sure you want to delete all tasks? (y/n)${NC}"
      read confirm
      if [[ "$confirm" == "y" || "$confirm" == "Y" ]]; then
        crontab -r
        echo -e "${GREEN}All scheduled tasks removed.${NC}"
      else
        echo -e "${YELLOW}Operation canceled.${NC}"
      fi
      ;;
    *)
      echo -e "${RED}Invalid choice.${NC}"
      ;;
  esac
}

help_menu() {
  echo -e "${BLUE}Usage: $0 [options]${NC}"
  echo -e "-a\tAnalyze Logs"
  echo -e "-c\tClean Temporary Files"
  echo -e "-d\tDisk Health Check"
  echo -e "-f\tFind Helper"
  echo -e "-l\tList Services"
  echo -e "-n\tNetwork Information"
  echo -e "-s\tSystem Information"
  echo -e "-p\tProcess Management"
  echo -e "-t\tCron Manager"
  echo -e "-u\tUser Management"
  echo -e "-v\tList Sudo Users"
  echo -e "-h\tHelp Menu"
}

main() {
  print_banner
  if [[ $# -eq 0 ]]; then
    help_menu
    exit 0
  fi

  while getopts ":acflnspuhvdt" opt; do
    case $opt in
      a) analyze_logs ;;
      c) cleanup_temp ;;
      d) disk_health ;;
      f) find_helper ;;
      l) service_list ;;
      n) network_info ;;
      s) system_info ;;
      p) process_management ;;
      t) cron_manager ;;
      u) user_management ;;
      v) check_sudo_users ;;
      h) help_menu ;;
      \?) echo -e "${RED}Invalid option: -$OPTARG${NC}" >&2; help_menu; exit 1 ;;
    esac
  done
}
main "$@"